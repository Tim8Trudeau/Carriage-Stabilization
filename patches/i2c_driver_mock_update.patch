diff --git a/hardware/i2c_driver.py b/hardware/i2c_driver.py
index 1111111..2222222 100644
--- a/hardware/i2c_driver.py
+++ b/hardware/i2c_driver.py
@@ -70,26 +70,18 @@ def _make_mock_host(controller_params: Dict, apply_initial_conditions: bool):
-    """
-    Create a pigpio-like mock host and wire it to mock_i2c.MockI2CBus.
-    """
-    try:
-        from test.mocks.mock_i2c import MockI2CBus  # project mock
-    except Exception as e:
-        raise ImportError("mock_i2c.MockI2CBus not found at repo root") from e
-
-    class _MockPiHost:
-        def __init__(self):
-            self._handles = {}
-            self._next_h = 1
-            self._regs: Dict[int, int] = {CTRL3_C: 0x00}
-            use_toml = bool(apply_initial_conditions and not _running_under_pytest())
-            self._bus = MockI2CBus(
-                controller_params=controller_params,
-                sim_config_path=_SIM_TOML_PATH if use_toml else None,
-                sim_mode=use_toml,
-            )
-        ...
-    _i2c_log.info("i2c_driver: using MockI2CBus-backed I2C host shim.")
-    return _MockPiHost()
+    """
+    Create a pigpio-like mock host from the unified mock_pigpio.
+    """
+    try:
+        from test.mocks import mock_pigpio
+    except Exception as e:
+        raise ImportError("test.mocks.mock_pigpio not found") from e
+
+    # Pass params so the mock can ingest simulation knobs if it wants.
+    use_toml = bool(apply_initial_conditions and not _running_under_pytest())
+    pi = mock_pigpio.pi()
+    _i2c_log.info("i2c_driver: using unified mock_pigpio as I2C host (SIM_MODE=%s, toml=%s)",
+                  bool(controller_params.get("SIM_MODE", False)), use_toml)
+    return pi

@@ -150,7 +142,12 @@ def get_i2c_host(controller_params: Optional[Dict] = None,
-    if sim_mode is None:
-        sim_mode = bool(params.get("SIM_MODE", False))
+    if sim_mode is None:
+        env_force = os.getenv("CS_HW", "").lower()
+        if env_force in ("mock", "sim", "simulation"):
+            sim_mode = True
+        else:
+            sim_mode = bool(params.get("SIM_MODE", False))
diff --git a/test/unit/test_i2c_driver_unit.py b/test/unit/test_i2c_driver_unit.py
index 3333333..4444444 100644
--- a/test/unit/test_i2c_driver_unit.py
+++ b/test/unit/test_i2c_driver_unit.py
@@ -22,26 +22,35 @@ import types, sys, os
-def _install_stub_mock_i2c(monkeypatch):
-    """
-    Ensure imports of 'test.mocks.mock_i2c' or 'mock_i2c' succeed with a tiny stub
-    that implements MockI2CBus.imu_read() -> 6 bytes.
-    """
-    class StubMockI2CBus:
-        def __init__(self, *a, **k): pass
-        def imu_read(self, **_):
-            # AX=+1, AY=-2, GZ=+3 (little-endian int16)
-            return (1).to_bytes(2, "little", signed=True) + \
-                   (-2).to_bytes(2, "little", signed=True) + \
-                   (3).to_bytes(2, "little", signed=True)
-        def close(self): pass
-
-    for name in ("test.mocks.mock_i2c", "mock_i2c"):
-        mod = types.ModuleType(name)
-        mod.MockI2CBus = StubMockI2CBus
-        monkeypatch.setitem(sys.modules, name, mod)
+def _install_stub_mock_pigpio(monkeypatch):
+    """
+    Provide a minimal 'test.mocks.mock_pigpio' module whose pi() returns an object
+    with the i2c_* API used by the driver.
+    """
+    class FakePi:
+        def __init__(self): self.connected = True
+        def i2c_open(self, bus, addr, flags=0): return 1
+        def i2c_close(self, h): pass
+        def i2c_read_byte_data(self, h, reg): return 0
+        def i2c_read_i2c_block_data(self, h, reg, count): return (count, bytes([0]*count))
+        def i2c_write_byte_data(self, h, reg, val): pass
+        def stop(self): pass
+
+    mod = types.ModuleType("test.mocks.mock_pigpio")
+    mod.pi = lambda: FakePi()
+    monkeypatch.setitem(sys.modules, "test.mocks.mock_pigpio", mod)
@@ -68,7 +77,7 @@ def test_get_i2c_host_returns_mock(monkeypatch):
-    _install_stub_mock_i2c(monkeypatch)   # in case code falls back
+    _install_stub_mock_pigpio(monkeypatch)
@@ -81,7 +90,7 @@ def test_get_i2c_host_env_forces_mock(monkeypatch):
-    _install_stub_mock_i2c(monkeypatch)
+    _install_stub_mock_pigpio(monkeypatch)
